trigger:
  branches:
    include:
      - streamlabs-24.0.1
  tags:
    include:
      - 24.0.1-streamlabs-v*

workspace:
  clean: all

strategy:
  matrix:
    Release:
      CefBuildConfig: Release
      BuildConfig: RelWithDebInfo
      ReleaseName: release
    Debug:
      CefBuildConfig: Debug
      BuildConfig: Debug
      ReleaseName: debug

pool:
  name: 'Default'

variables:
  CmakeGenerator: Visual Studio 15 2017
  DepsPath32: $(Build.SourcesDirectory)\dependencies2017\win32
  DepsPath64: $(Build.SourcesDirectory)\dependencies2017\win64
  BuildPath32: $(Build.SourcesDirectory)\build32
  BuildPath64: $(Build.SourcesDirectory)\build64
  InstallPath32: $(Build.SourcesDirectory)\packed_build_32
  InstallPath64: $(Build.SourcesDirectory)\packed_build_64
  CefVersion: 75.1.16_g16a67c4_chromium-75.0.3770.100
  CefDirName: cef_binary_$(CefVersion)_windows64_minimal
  CefPath: $(Build.SourcesDirectory)\$(CefDirName)
  CefBuildPath: $(CefPath)\build
  CefZip: $(CefDirName).zip
  CefUrl: https://s3-us-west-2.amazonaws.com/streamlabs-cef-dist/$(CefZip)
  DependenciesUrl: https://obs-studio-deployment.s3-us-west-2.amazonaws.com/dependencies2017.1.zip
  VLCLibPath: $(Build.SourcesDirectory)\vlc
  VLCUrl: https://obsproject.com/downloads/vlc.zip

steps:
- powershell: 'Write-Host "##vso[task.setvariable variable=tag]$((git.exe describe --tags --abbrev=0) | Out-String)"'
  displayName: 'Get tag for artifact'

- script: | 
    git submodule update --init --recursive --jobs 2
    if not exist "%BuildPath32%" (mkdir "%BuildPath32%")
    if not exist "%BuildPath64%" (mkdir "%BuildPath64%")
  displayName: 'Update submodules and create build folders'

- script: |
    if not exist "dependencies2017.1.zip" (curl -kLO "%DependenciesUrl%" -f --retry 5)
    if not exist "%CefZip%" (curl -kLO "%CefUrl%" -f --retry 5)
    if not exist "vlc.zip" (curl -kLO "%VLCUrl%" -f --retry 5)
    7z x "%CefZip%"
    7z x dependencies2017.1.zip -odependencies2017
    7z x vlc.zip -ovlc
  displayName: 'Download and extract dependencies'

- script: 'cmake -G"%CMakeGenerator%" -A x64 -H"%CefPath%" -B"%CefBuildPath%" -DCEF_RUNTIME_LIBRARY_FLAG="/MD"'
  displayName: 'Configure libCef'

- script: 'cmake --build "%CefBuildPath%" --config %CefBuildConfig% --target libcef_dll_wrapper -v'
  displayName: 'Build libCef'

- script: 'cmake -H.
                 -B"%BuildPath32%"
                 -G"%CmakeGenerator%"
                 -A Win32
                 -DCMAKE_INSTALL_PREFIX="%InstallPath32%"
                 -DDepsPath="%DepsPath32%"
                 -DVLCPath="%VLCLibPath%"
                 -DCEF_ROOT_DIR="%CefPath%"
                 -DENABLE_UI=false
                 -DCOPIED_DEPENDENCIES=false
                 -DCOPY_DEPENDENCIES=true
                 -DENABLE_SCRIPTING=false
                 -DBUILD_CAPTIONS=false
                 -DCOMPILE_D3D12_HOOK=true
                 -DBUILD_BROWSER=false
                 -DBROWSER_FRONTEND_API_SUPPORT=false
                 -DBROWSER_PANEL_SUPPORT=false
                 -DBROWSER_USE_STATIC_CRT=false
                 -DEXPERIMENTAL_SHARED_TEXTURE_SUPPORT=true'
  displayName: 'Configure libobs 32 bits'

- script: 'cmake --build "%BuildPath32%" --target install --config %BuildConfig% -v'
  displayName: 'Build libobs 32 bits'

- script: 'cmake -H.
                 -B"%BuildPath64%"
                 -G"%CmakeGenerator%"
                 -A x64
                 -DCMAKE_INSTALL_PREFIX="%InstallPath64%"
                 -DDepsPath="%DepsPath64%"
                 -DVLCPath="%VLCLibPath%"
                 -DCEF_ROOT_DIR="%CefPath%"
                 -DENABLE_UI=false
                 -DCOPIED_DEPENDENCIES=false
                 -DCOPY_DEPENDENCIES=true
                 -DENABLE_SCRIPTING=false
                 -DBUILD_CAPTIONS=false
                 -DCOMPILE_D3D12_HOOK=true
                 -DBUILD_BROWSER=true
                 -DBROWSER_FRONTEND_API_SUPPORT=false
                 -DBROWSER_PANEL_SUPPORT=false
                 -DBROWSER_USE_STATIC_CRT=false
                 -DEXPERIMENTAL_SHARED_TEXTURE_SUPPORT=true'
  displayName: 'Configure libobs 64 bits'

- script: 'cmake --build "%BuildPath64%" --target install --config %BuildConfig% -v'
  displayName: 'Build libobs 64 bits'

- script: 'copy %InstallPath32%\data\obs-plugins\win-capture\get-graphics-offsets32.exe %InstallPath64%\data\obs-plugins\win-capture\'
  displayName: 'Copy get-graphics-offsets32.exe'

- script: 'copy %InstallPath32%\data\obs-plugins\win-capture\graphics-hook32.dll %InstallPath64%\data\obs-plugins\win-capture\'
  displayName: 'Copy graphics-hook32.dll'

- script: 'copy %InstallPath32%\data\obs-plugins\win-capture\inject-helper32.exe %InstallPath64%\data\obs-plugins\win-capture\'
  displayName: 'Copy inject-helper32.exe'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: $(InstallPath64)
    includeRootFolder: true
    archiveType: 7z
    archiveFile: 'libobs-$(ReleaseName)-$(tag).7z'
  displayName: 'Generate artifact'

- task: PublishBuildArtifacts@1
  inputs: 
    pathtoPublish: $(Build.SourcesDirectory)\libobs-$(ReleaseName)-$(tag).7z
    artifactName: libobs-$(ReleaseName)-$(BuildNumber).7z
  displayName: 'Publish artifact'

- task: S3Upload@1
  inputs:
    awsCredentials: 'Streamlabs AWS'
    regionName: 'us-west-2'
    bucketName: 'obsstudios3.streamlabs.com'
    globExpressions: 'libobs-$(ReleaseName)-$(tag).7z'
    filesAcl: 'public-read'
  displayName: 'Upload artifact to S3'
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'tags'))
